CLASS: PLESIO inhereits from Dinosaur 

CLASS FEILDS: 
name 
mass  
hasTailfinn

CONSTRUCTORS: 

Default: 
  IMPORT: none 
  EXPORT: none 
  ALGORTHM: 
    
    DEFAULT Constructor for Superclass Dinosaur  
    hasTailfinn:= true  

Alternate: 
  IMPORT: inName, inMass,inHasTailfinn, inSequence
  EXPORT: none 
  ALGORTHM: 
    IF (validateName<-inHasTailfinn) 
       hasTailFinn:= inHasTailfinn  
    ELSE
       THROW invalid argument exception 
    END IF 

copy: 

IMPORT: inPLESIO (PLESIO)
EXPORT: none
ALGORITHM:  
    super<-inPLES
    hasTailFinn:= inPLESIO.getTail <- none

MUTATORS:
   


SUBMODULE: setHasTailFinn
IMPORT: inBite
EXPORT: none
ALGORITHM: 
IF (validateTail<-inHasTailFinn) 

 hasTailFinn = inHasTailFinn

ACCESSORS 


SUBMODULE: getHasTailfinn

    IMPORT: none
    EXPORT: hasTailFinn 


SUBMODULE: equals
IMPORT: inObj (Object)
EXPORT: same (boolean)
ALGORITHM: 
same := FALSE
   IF (inObj ISA PLESIO) THEN
        inObj:= (Convert to PLESIO)inObj
     IF   (hasTailFinn  EQUALS inPLESIO.getHastailfin <-none) 
         same = TRUE 
      ENDIF

SUBMODULE: clone
 IMPORT: none 
 EXPORT: clonePLESIO (Object) 
 ALGORITHM: 
  CONSTRUCT clonePLESIO USING ALTERNATE CONSTRUCTOR WITH
               name, mass, bite, genome

SUBMODULE toString
IMPORT: none 
EXPORT: str
ALGORTHM: 
str = suer.toString + hasTailFinn

PRIVATE SUBMODULES
 

SUBMODULE: validateHasTailfinn 
 IMPORT: inHasTailfinn 
 EXPORT: valid (boolean) 
  valid = inHasTailfinn = FALSE or inHasTailfinn = TRUE


